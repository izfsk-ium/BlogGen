#!/bin/bash
set -e  # die if any error occorres

function process_start() {
    START="\e[38;5;46m"
    END="\e[0m"
    echo -e "${START}$1${END}"
}

function process_end() {
    START="\e[38;5;111m"
    END="\e[0m"
    echo -e "${START}$1${END}"
}

function createDirStruct() {
    # create blog output struct
    process_start "Start Making Dirs"
    touch chksum.list
    mkdir -p output/{articles,fs,res,specs}
    process_end "Done"
}

function copyStyles() {
    # copy all css files from src/styles to output/res
    process_start "Starting copying styles..."
    cp src/styles/*.css output/res
    cp ./src/styles/pointer.png "./output/res/"
    process_end "Done"
}

function invokePandocTransfer() {
    # $1 : the path of raw markdown file path
    # this function run pandoc command to convert html file.
    if [[ $1 = "" ]];then
        echo "No src file provided!"
        exit
    fi

    filename=$(echo $(basename $1)|awk -v FS='.' '{print $1}')
    
    process_start "Pandoc is processing $filename ($1)"
    mkdir -p \
        "./output/articles/$filename"  \
        "./output/articles/$filename/assets/"    

    # generate HTML file, save as _index.html
    pandoc \
        --to=html5+smart \
        --template="./src/templates/article.template.html" \
        --wrap=none \
        --toc \
        --highlight=breezedark \
        --from=markdown \
        --css="/res/fonts.css" \
        --css="/res/article.css" \
        --metadata lastmodify=${date} \
        $1 > "./output/articles/$filename/_index.html"

    # copy all images and resources
    cp -r $(dirname $1)/assets/ "./output/articles/$filename/"
    process_end "Done for ${filename}"
}

function generate_font_splited() {
    # $1 : raw HTML file to process
    # This function use a python script to filter all no-chinese characters
    # then store them in a tmp dir and use font-spider to process them
    # generate TW-Sung and CJao fonts and copy back to target dir
    filename=$(echo $(basename $1)|awk -v FS='.' '{print $1}')
    process_start "Generating fonts for ${filename}"
    TMPDIR="/tmp/___BlogFontsProcess___$RANDOM"
    mkdir -p $TMPDIR

    cp './src/fonts/TW-Sung-98_1.ttf' $TMPDIR
    cp './src/fonts/CJgaodeguomh.ttf' $TMPDIR

    ./lib/character-filter.py $1 > $TMPDIR/index.html
    ./node_modules/.bin/font-spider --no-backup $TMPDIR/index.html
    
    mv $TMPDIR/TW-Sung-98_1.*  "./output/articles/$filename/assets/"
    mv $TMPDIR/CJgaodeguomh.*  "./output/articles/$filename/assets/"
    
    rm -rf $TMPDIR/
    process_end "Done"
}

function processArticles() {
    # scan all articles and check their cksum, if modified
    # update the article.
    # NOTE: Do not delete article from file system as the cksum
    # file will not be updated, use blogmgr.py to do so
    process_start "Starting process all articles..."
    for i in $(find ./src/articles -type f -name "*.md");do
        old_hash=$(grep -iR $i ./chksum.list | awk '{print $1}')
        new_hash=$(sha224sum $i | awk '{print $1}')

        if [[ $old_hash = $new_hash ]]; then
            echo "File $i not modified. Skip."
        else
            echo "File $i modified. Processing..."
            invokePandocTransfer $i

            filename=$(echo $(basename $i)|awk -v FS='.' '{print $1}')
            # Invoke patch_output to modify credit, custom-css according toml config
            ./build.py PatchImport $filename

            # Now the _index.html has no custom fonts, 
            # use python script to insert them.
            ./lib/patch_fonts.py $filename

            # Now use font-spider to generate file
            generate_font_splited $i
        fi
    done   
    process_end "Done"
}

function createCksumFile() {
    # generate hash for all articles
    process_start "Creating checksum files..."
    echo -e '' > ./chksum.list
    for i in $(find ./src/articles -type f -name "*.md");do
        sha224sum $i >> ./chksum.list;
    done
    sha224sum ./src/templates/index.template.html >> ./chksum.list
    sha224sum ./src/special_pages/about.html >> ./chksum.list
    process_end "Done"
}

function processSpecPages() {
    process_start "Processing special pages..."
    # archive, bookmarks, category, fs, index, rss and tags 
    # are all generated by python script, just invoke it.
    ./build.py
    process_end "Done"
}

function copyStaticPages() {
    # pages under src/special_pages will be directly copied to 
    # output/specs as well as favicon, 404 page and pointer
    process_start "Copying static pages..."
    cp ./src/special_pages/*.html './output/specs'
    cp ./src/favicon.ico './output/'
    cp ./src/404.html './output/404.html'
    cp ./src/styles/pointer.png './output/res/'
    process_end "Done"
}

function generate_fonts_for_spec_pages() {
    # most of spec pages (index, about) need TW-Sung 
    # generate fonts for them.
    process_start 'Generating fonts for special pages...'
    TMPDIR="/tmp/___BlogFontsProcess___$RANDOM"
    mkdir -p $TMPDIR    

    # check and generate fonts for index
    old_hash=$(grep -iR './src/templates/index.template.html' ./chksum.list | awk '{print $1}')
    new_hash=$(sha224sum './src/templates/index.template.html' | awk '{print $1}')
    if [[ $old_hash = $new_hash ]]; then
        echo "Index not modified."
    else
        echo "Index modified!"
        cp './src/fonts/TW-Sung-98_1.ttf' $TMPDIR

        ./lib/character-filter.py "./src/templates/index.template.html" TWSungOnly > $TMPDIR/index.html
        ./node_modules/.bin/font-spider --no-backup $TMPDIR/index.html

        mv "$TMPDIR/TW-Sung-98_1.woff2"  "./output/res/TW-Sung-98_1-index.woff2"
        rm $TMPDIR/*
    fi

    # check and generate fonts for about page
    old_hash=$(grep -iR './src/special_pages/about.html' ./chksum.list | awk '{print $1}')
    new_hash=$(sha224sum './src/special_pages/about.html' | awk '{print $1}')
    if [[ $old_hash = $new_hash ]]; then
        echo "About Page not modified."
    else
        cp './src/fonts/TW-Sung-98_1.ttf' $TMPDIR

        ./lib/character-filter.py "./src/special_pages/about.html" TWSungOnly > $TMPDIR/index.html
        ./node_modules/.bin/font-spider --no-backup $TMPDIR/index.html

        mv "$TMPDIR/TW-Sung-98_1.woff2"  "./output/res/TW-Sung-98_1-specs.woff2"
        rm -rf $TMPDIR/
    fi
    process_end 'Done'
}

function sync_fs() {
    # copy src/fs to output/fs
    process_start 'Sync File Dir...'
    rm -rf ./output/fs/*
    cp ./src/fs/* ./output/fs/
    process_end 'Done'
}

function clean_up() {
    # remove all the _index.html in output/articles dir 
    # and all the eot and svg fonts (Good bay IE)
    # make sure there is at least one .eot file so rm will not report missing operand
    process_start "Cleaning up..."
    touch ./output/articles/_.eot
    find ./output/articles/ -type f -name '*.eot' -print0 | xargs -0 rm
    process_end "Done"
}

# main function

process_start "Start Processing..."

createDirStruct
copyStyles
processArticles
processSpecPages
copyStaticPages
sync_fs
generate_fonts_for_spec_pages
createCksumFile
clean_up

process_end "All done"